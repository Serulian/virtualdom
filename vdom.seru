from "github.com/Serulian/corelib:master" import Map, List
from types import VirtualNode, FunctionReference

/**
 * BuildVirtualNode builds a new virtual DOM node with the given tag name, attributes and children.
 */
function<VirtualNode> BuildVirtualNode(tagName string, props []{any}, children any*) {
	var attributes = Map<string, string>.Empty()
	var eventHandlers = Map<string, FunctionReference>.Empty()

	var key = props["Key"].(string)
	for name in props.Keys {
		if name.HasPrefix("on") {
			eventHandlers[name[2:]] = props[name].(FunctionReference)
		} else if name != "Key" {
			attributes[name] = props[name].(string)
		}
	}

	var childList = List<VirtualNode>.Empty()
	for child in children {
		stringValue, _ := child.(string)
		if stringValue is not null {
			childList.Add(VirtualNode{
				Text: stringValue,
				EventHandlers: []{FunctionReference}{},
				Attributes: []{string}{},
				Children: []VirtualNode{},
			})
			continue
		}

		childList.Add(child.(VirtualNode))
	}

	return VirtualNode{
		Key: key,
		TagName: tagName,
		EventHandlers: eventHandlers.Mapping(),
		Attributes: attributes.Mapping(),
		Children: childList[0:],
	}
}

function<VirtualNode> Div(props []{any}, childStream any*) {
	return BuildVirtualNode('div', props, childStream)
}

function<VirtualNode> Img(props []{any}, childStream any*) {
	return BuildVirtualNode('img', props, childStream)
}

function<VirtualNode> Select(props []{any}, childStream any*) {
	return BuildVirtualNode('select', props, childStream)
}

function<VirtualNode> Option(props []{any}, childStream any*) {
	return BuildVirtualNode('option', props, childStream)
}
