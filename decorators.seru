from renderable import Context, RenderToVirtualNode, renderableVirtualNode
from types import VirtualNode

/**
 * Decorates a value to only be added to the tree if the condition is met.
 *
 * Usage: <Div @If={some boolean condition}>...</Div>
 */
function<any> If(value any, condition bool) { return value if condition else VirtualNode{Text: ''} }

/**
 * DynamicAttributes marks a renderable virtual node with attributes only if their expression
 * value is true. This is useful for marking DOM nodes with attributes such as `selected` or
 * `readonly`.
 *
 * Usage: <TextArea @DynamicAttributes={{'readonly': someBoolExpr}} />
 */
function<renderableVirtualNode> DynamicAttributes(value renderableVirtualNode, attributes map<string, bool>) {
	for attributeName in attributes.Keys {
		if attributes[attributeName] ?? false {
			value.props = value.props.WithEntry(attributeName, true)
		}
	}
	return value
}

/**
 * HideIf a value to be hidden in the DOM tree if the condition is met. Otherwise, no
 * changes are made to the element.
 *
 * Usage: <Div @HideIf={some boolean condition}>...</Div>
 */
function<any> HideIf(value any, condition bool) {
	// If the condition is not met, no need to mark it with a display, as we aren't
	// hiding it in that case.
	if !condition { return value }

	// Otherwise, return a component which reduces the value to a VirtualNode
	// and then we set the style display attribute.
	return elementRenderer{
		value: value,
		decorator: function<VirtualNode>(virtualNode VirtualNode) {
			return addStyle(virtualNode, 'display', 'none')
		},
	}
}

/**
 * addStyle adds a CSS style with the given name and value to the `style` attribute on the virtual node,
 * returning an updated copy of the virtual node.
 */
function<VirtualNode> addStyle(virtualNode VirtualNode, styleName string, styleValue string) {
	attributes := virtualNode.Attributes ?? []{string}{}

	var styleString = attributes['style'] ?? ''
	if !styleString.IsEmpty {
		styleString = styleString + '; '
	}

	updated := attributes.WithEntry('style', `${styleString}${styleName}: ${styleValue}`)
	return virtualNode{Attributes: updated}
}

/**
 * elementRenderer defines a small component which renders the value to
 * a VirtualNode and then decorates it with a call to the specified function.
 */
class elementRenderer {
	var<any> value
	var<function<VirtualNode>(VirtualNode)> decorator

	function<any> Render(context Context) {
		return this.decorator(RenderToVirtualNode(this.value, context))
	}
}

