from webidl`@core` import String as DOMString

from "github.com/serulian/attachment" import Attachment

from webidl`dom` import Element, Event, Node, Text, document

from types import VirtualNode

/**
 * keyAttachment defines an attachment for holding the VirtualDOM key on a DOM element.
 */
var keyAttachment Attachment<string> = Attachment<string>.Unique('vdom-key')

/**
 * DOMNode defines an abstract interface for working with a DOM node or VirtualNode.
 */
interface DOMNode {
	property IsElement bool { get }

	property TagName string { get }

	property Key string? { get }

	property TextData string? { get }

	property AttributeNames []string { get }

	property ChildCount int { get }

	function GetChild(index int) DOMNode

	function GetAttribute(name string) string?

	property Virtual VirtualNode? { get }
}

/**
 * DOMError represents an error raised when trying to access data from the DOM.
 */
class DOMError {
	var message string

	constructor WithMessage(message string) {
		return DOMError{message: message}
	}

	property Message string {
		get { return this.message }
	}
}

/**
 * NodeWrapper wraps a DOM node in the DOMNode interface for easier diffing.
 */
type NodeWrapper : Node {
	constructor For(node Node) {
		return NodeWrapper(node)
	}

	property AttributeNames []string {
		get {
			if !this.IsElement { return []string{} }

			var attributes = Element(this).attributes
			var names = list<string>.Empty()
			for attr in slice<any>.ForArray(attributes) {
				names.Add(string(attr->name.(DOMString)))
			}

			return names[0:]
		}
	}

	property Key string? {
		get { return keyAttachment[&this] }
	}

	property IsElement bool {
		get { return int(Node(this).nodeType) == 1 }
	}

	property TagName string {
		get {
			if !this.IsElement { return '' }
			return string(Element(this).tagName).ToLowerCase()
		}
	}

	property TextData string? {
		get {
			if this.IsElement { return null }
			return string(Text(this).wholeText)
		}
	}

	property ChildCount int {
		get { return int(Element(this).childNodes.length) }
	}

	property Virtual VirtualNode? {
		get { return null }
	}

	function GetChild(index int) DOMNode {
		var child = Element(this).childNodes[&index]
		if child is null {
			reject DOMError{message: 'Invalid child index'}
		}

		return NodeWrapper(child!)
	}

	function GetAttribute(name string) string? {
		if !this.IsElement {
			reject DOMError{message: 'Cannot retrieve attribute for non-element'}
		}

		return string(Element(this).getAttribute(&name))
	}
}

/**
 * VirtualNodeWrapper wraps the VirtualNode type in the DOMNode interface.
 */
type VirtualNodeWrapper : VirtualNode {
	constructor For(node VirtualNode) {
		return VirtualNodeWrapper(node)
	}

	property Virtual VirtualNode? {
		get { return VirtualNode(this) }
	}

	property Key string? {
		get { return VirtualNode(this).Key }
	}

	property AttributeNames []string {
		get {
			attrs := VirtualNode(this).Attributes
			if attrs is null {
				return []string{}
			} else {
				return slice<string>.From(attrs.Keys)
			}
		}
	}

	property IsElement bool {
		get { return !(VirtualNode(this).TagName is null) }
	}

	property TagName string {
		get { return VirtualNode(this).TagName ?? '' }
	}

	property ChildCount int {
		get {
			children := VirtualNode(this).Children
			if children is null {
				return 0
			} else {
				return children.Length
			}
		}
	}

	property TextData string? {
		get { return VirtualNode(this).Text }
	}

	function GetChild(index int) DOMNode {
		if index >= this.ChildCount {
			reject DOMError{message: 'Invalid child index'}
		}

		children := VirtualNode(this).Children
		return VirtualNodeWrapper((children!)[index])
	}

	function GetAttribute(name string) string? {
		if !this.IsElement {
			reject DOMError{message: 'Cannot retrieve attribute for non-element'}
		}

		attributes := VirtualNode(this).Attributes
		if attributes is not null {
			return attributes[name]
		} else {
			return null
		}
	}
}
