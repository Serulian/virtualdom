from webidl`@core` import Function as NativeFunction

from @core import Map, List, Set

from webidl`dom` import Element, Node, Event

from internal import getDOMPath, fastStringMap
from types import VirtualNode, FunctionReference
from wrappers import NodeWrapper

/**
 * EventManager defines a type for tracking and managing all events registered on a virtual
 * DOM tree.
 */
class EventManager {
	var element Element
	var registered Set<string> = Set<string>.Empty()
	var functionRefCounter int = 0
	var handlers fastStringMap<function<void>(any)> = fastStringMap<function<void>(any)>.Empty()
	var tree eventTree = eventTree.new()

	/**
	 * ForElement returns an EventManager rooted at the specified DOM element. All event handlers
	 * will be registered on the specified element.
	 */
	constructor ForElement(element Element) {
		return EventManager{element: element}
	}

	function NodeRemoved(domNode Node) {
		if !NodeWrapper(domNode).IsElement { return }

		var path = getDOMPath(domNode)
		var split = path.Split('.')
		this.tree.removeBranch(split)
	}

	function NodeCreated(virtualNode VirtualNode, domNode Node) {
		insertedCallback := virtualNode.DOMNodeInserted
		if insertedCallback is not null {
			this.invokeHandler(insertedCallback, domNode)
		}

		eventHandlers := virtualNode.EventHandlers
		if eventHandlers is not null {
			if eventHandlers.IsEmpty { return }

			var path = getDOMPath(domNode)
			var split = path.Split('.')
			var treeEntry = this.tree.getOrAddBranch(split)
			treeEntry.clearHandlers()

			for eventName in eventHandlers.Keys {
				this.register(eventName)

				var handlerRef = eventHandlers[eventName]
				treeEntry.addHandler(eventName, handlerRef!)
			}
		}
	}

	function NodeUpdated(virtualNode VirtualNode, domNode Node) {
		updatedCallback := virtualNode.DOMNodeUpdated
		if updatedCallback is not null {
			this.invokeHandler(updatedCallback, domNode)
		}

		var path = getDOMPath(domNode)
		var split = path.Split('.')
		var treeEntry = this.tree.getOrAddBranch(split)
		treeEntry.clearHandlers()

		eventHandlers := virtualNode.EventHandlers
		if eventHandlers is not null {
			for eventName in eventHandlers.Keys {
				this.register(eventName)

				var handlerRef = eventHandlers[eventName]
				treeEntry.addHandler(eventName, handlerRef!)
			}
		}
	}

	function RegisterFunction(func function<void>(any)) FunctionReference {
		var ref = this.functionRefCounter.String()
		this.handlers[ref] = func
		this.functionRefCounter = this.functionRefCounter + 1
		return FunctionReference(ref)
	}

	function handleEvent(evt Event) {
		var srcElement = evt.srcElement
		if srcElement is null { return }

		// Find the entry in the tree for the srcElement's path.
		var path = getDOMPath(srcElement!)
		var split = path.Split('.')

		eventName := string(evt[&'type'])
		handlers := this.tree.getHandlers(split, eventName)
		if handlers.IsEmpty { return }

		for handler in handlers {
			this.invokeHandler(handler, evt)
		}
	}

	function invokeHandler(handler FunctionReference, param any) {
		var handlerFunc = this.handlers[string(handler)]
		if handlerFunc is not null {
			handlerFunc(param)
		}
	}

	function register(eventName string) {
		if this.registered.Add(eventName) {
			this.element.addEventListener(&eventName, function(evt Event) {
				this.handleEvent(evt)
			})
		}
	}
}

/**
 * eventTree represents a single level of an event tree for propagation of events.
 */
class eventTree {
	var children fastStringMap<eventTree> = fastStringMap<eventTree>.Empty()
	var handlers fastStringMap<FunctionReference> = fastStringMap<FunctionReference>.Empty()

	function removeBranch(parts []string) {
		if parts.Length == 1 {
			this.children.RemoveKey(parts[0])
			return
		}

		var child = this.children[parts[0]]
		if child is null { return }

		(child!).removeBranch(parts[1:])
	}

	function getOrAddBranch(parts []string) eventTree {
		if parts.Length == 0 { return this }

		var child = this.children[parts[0]]
		if child is null {
			var newBranch = eventTree.new()
			var index = parts[0]

			this.children[index] = newBranch
			return newBranch.getOrAddBranch(parts[1:])
		}

		return (child!).getOrAddBranch(parts[1:])
	}

	function getBranch(parts []string) eventTree? {
		if parts.Length == 0 { return this }

		var child = this.children[parts[0]]
		if child is null { return null }

		return (child!).getBranch(parts[1:])
	}

	/**
	 * getHandlers returns all handlers for the specified `eventName` on the element
	 * starting at `parts` and working upward the DOM tree.
	 */
	function getHandlers(parts []string, eventName string) []FunctionReference {
		var handlers = []FunctionReference{}
		var branch = this
		for index in 0 .. parts.Length {
			currentHandler := branch.handlers[eventName]
			if currentHandler is not null {
				handlers = [currentHandler] + handlers
			}

			nextBranch := branch.children[parts[index]] if index < parts.Length else null
			if nextBranch is null {
				return handlers
			} else {
				branch = nextBranch
			}
		}

		return handlers
	}

	function clearHandlers() {
		this.handlers = fastStringMap<FunctionReference>.Empty()
	}

	function addHandler(eventName string, funcRef FunctionReference) {
		this.handlers[eventName] = funcRef
	}

	function lookupHandler(eventName string) FunctionReference? {
		return this.handlers[eventName]
	}
}
